import { basename } from 'path'
import { B, be_ } from '@ctx-core/object'
import { node_modules_src_aa_async_b } from './node_modules_src_aa_async_b.js'
import { version_ } from './version_.js'
import { version_path_ } from './version_path_.js'
import type { web_build_Ctx } from './web_build_Ctx.js'
const key = 'version_node_modules_src_basename_aa_async'
export const version_node_modules_src_basename_aa_async_b:B<web_build_Ctx, typeof key> = be_(key, async (ctx)=>{
	const node_module_src_aa = await node_modules_src_aa_async_b(ctx)
	const version_node_modules_src_basename_aa_async = (
		await Promise.all(node_module_src_aa.map(
			async (node_module_src_a)=>{
				const [node_module_src, ...rest] = node_module_src_a
				const version = await version_(node_module_src)
				return [
					basename(version_path_(node_module_src, version)),
					...rest.map(node_module_src=>
						basename(version_path_(node_module_src, version))
					)
				]
			}, []))
	)
	return version_node_modules_src_basename_aa_async
})
export type version_node_modules_src_basename_aa_async_T = Promise<string[][]>
